# Hotel Management System - Setup Guide

This document provides a step-by-step guide to set up and run the Hotel Management System.

## Prerequisites

Before setting up the project, make sure you have the following installed:

1. **Node.js** (v14 or later)
2. **npm** (v6 or later)
3. **Firebase Account** with Firestore and Authentication enabled
4. **Git** (optional, for version control)

## 1. Project Setup

### Clone or Download the Project

```bash
# Clone the repository (if using Git)
git clone <repository-url>

# Or download and extract the project files

# Navigate to the project directory
cd hotel-management-system
```

### Install Dependencies

```bash
# Install all project dependencies
npm install
```

## 2. Firebase Configuration

### Create a Firebase Project

1. Go to the [Firebase Console](https://console.firebase.google.com/)
2. Click "Add project" and follow the prompts to create a new project
3. Once the project is created, click on the project to access its dashboard

### Enable Authentication

1. In the Firebase Console, go to "Authentication" from the left sidebar
2. Click on the "Sign-in method" tab
3. Enable the "Email/Password" provider

### Set Up Firestore Database

1. In the Firebase Console, go to "Firestore Database" from the left sidebar
2. Click "Create database"
3. Choose "Start in production mode" or "Start in test mode" (for development)
4. Select a location for your database and click "Enable"

### Configure Storage

1. In the Firebase Console, go to "Storage" from the left sidebar
2. Click "Get started"
3. Follow the prompts to set up Firebase Storage(Mat tien -_-)

### Generate Service Account Key

1. In the Firebase Console, go to "Project settings" (gear icon)
2. Go to the "Service accounts" tab
3. Click "Generate new private key"
4. Save the JSON file securely

### Update Environment Variables

Create a `.env` file in the project root and fill in your Firebase configuration:

```
# Server Configuration
PORT=3000
SESSION_SECRET=your-session-secret-key-here

# Firebase Configuration
FIREBASE_API_KEY=AIzaSyD_yyFCf3mbCGJjQ2rykJ3edNkFmp-B7UE
FIREBASE_AUTH_DOMAIN=doan-hotel-lembo.firebaseapp.com
FIREBASE_DATABASE_URL=https://doan-hotel-lembo-default-rtdb.asia-southeast1.firebasedatabase.app
FIREBASE_PROJECT_ID=doan-hotel-lembo
FIREBASE_STORAGE_BUCKET=doan-hotel-lembo.firebasestorage.app
FIREBASE_MESSAGING_SENDER_ID=511258929673
FIREBASE_APP_ID=1:511258929673:web:632ae4803102791747a6d8

# Firebase Admin SDK Service Account
# Replace with your entire service account JSON (as a string)
FIREBASE_SERVICE_ACCOUNT={"type":"service_account","project_id":"doan-hotel-lembo","private_key_id":"..."}
```

## 3. Database Setup

### Create Initial Collections

The system will automatically create collections as needed, but you can also set up the initial structure manually in the Firestore console:

- `users` - For user accounts
- `roomTypes` - For room type definitions
- `rooms` - For room details
- `bookings` - For booking information
- `comments` - For room reviews
- `orderItems` - For menu items
- `orders` - For customer orders
- `staff` - For staff information



## 4. Running the Application

### Development Mode

```bash
# Start the application in development mode
npm run dev
```

### Production Mode

```bash
# Start the application in production mode
npm start
```

The application will be available at `http://localhost:3000` (or the port specified in your .env file).

## 5. Creating Admin User

To access the admin panel, you need to create an admin user:

1. Register a new user through the application's sign-up page
2. Using the Firebase Console, go to the Firestore Database
3. Find the user in the `users` collection
4. Edit the user document to change the `role` field from `user` to `admin`

Alternatively, you can use the Firebase Authentication admin SDK to create an admin user programmatically.

## 6. System Access

### User Access

- **URL**: `http://localhost:3000`
- Users can browse rooms, make bookings, and place orders

### Admin Access

- **URL**: `http://localhost:3000/admin/dashboard`
- Admins can manage rooms, bookings, orders, and users

## 7. Folder Structure Overview

```
hotel-management-system/
├── config/            # Configuration files
├── controllers/       # Request handlers
├── middleware/        # Express middleware
├── models/            # Data models
├── public/            # Static assets
├── routes/            # Route definitions
├── utils/             # Utility functions
├── views/             # EJS templates
├── .env               # Environment variables
├── app.js             # Application entry point
└── package.json       # Project dependencies
```

## 8. Common Issues and Troubleshooting

### Firebase Connection Issues

If you encounter Firebase connection issues:

1. Verify that your Firebase project is properly set up
2. Check that your environment variables are correctly configured
3. Ensure the service account key has the necessary permissions

### CORS Issues

If you encounter CORS issues when accessing Firebase:

1. Configure CORS for your Firebase Storage bucket
2. Use the Firebase Admin SDK for server-side operations

### Authentication Issues

If users cannot log in or register:

1. Verify that email/password authentication is enabled in Firebase
2. Check for any Firebase Authentication quota limits
3. Verify that the Firebase configuration in your .env file is correct

## 9. Additional Resources

- [Node.js Documentation](https://nodejs.org/en/docs/)
- [Express.js Documentation](https://expressjs.com/)
- [Firebase Documentation](https://firebase.google.com/docs)
- [EJS Documentation](https://ejs.co/#docs)

## 10. Support and Contributions

For support or to contribute to the project, please contact the project maintainer.


trying to put files together. lacking views and utils